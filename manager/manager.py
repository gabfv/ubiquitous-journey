from sense_hat import SenseHat


class Manager:
    """
    This is to manage the interactions between the joystick, screen and the data gatherer.
    """

    def __init__(self):
        self.sense_hat = SenseHat()
        self.screen_index = 0

    def main_loop(self):
        while True:
            self.update_screen_rotation()
            # TODO : continue with what's needed

    def update_screen_rotation(self):
        """
        Update the rotation of the SensorHat screen according to its accelerometer data.
        """
        acceleration_x = self.sense_hat.get_accelerometer_raw()['x']
        acceleration_y = self.sense_hat.get_accelerometer_raw()['y']

        acceleration_x = round(acceleration_x, 0)
        acceleration_y = round(acceleration_y, 0)

        if acceleration_x == -1:
            self.sense_hat.set_rotation(90)
        elif acceleration_y == 1:
            self.sense_hat.set_rotation(0)
        elif acceleration_y == -1:
            self.sense_hat.set_rotation(180)
        else:
            self.sense_hat.set_rotation(270)

    def manage_joystick_events(self):
        """
        Process the events generated by the SenseHat joystick.
        """
        joystick_events = self.sense_hat.stick.get_events()

        for joystick_event in joystick_events:
            if joystick_event.action is not 'released':

                # The joystick push is a special event. It'll turn off the screen.
                if joystick_event.direction is 'push':
                    self.turn_off_screen_and_wait_for_user_action()
                else:
                    self.update_screen_index(joystick_event)

    def turn_off_screen_and_wait_for_user_action(self):
        """
        Turn off the screen and wait until the joystick is pushed. Do not react to other joystick events.
        """
        self.sense_hat.clear()

        # We should pause execution until the joystick is pushed.
        screen_off = True
        while screen_off:
            joystick_event = self.sense_hat.stick.wait_for_event()
            if joystick_event.direction is 'push':
                # TODO : update the screen
                screen_off = False

    def update_screen_index(self, joystick_event):
        """
        Update the screen index from the joystick event.
        :param joystick_event: The joystick event from which we will update
        """
        if joystick_event.direction is 'left':
            self.screen_index -= 1
        elif joystick_event.direction is 'right':
            self.screen_index += 1
